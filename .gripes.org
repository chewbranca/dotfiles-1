* Software for which I have one or zero legitimate complaints (hall of fame)
  - xmonad
    - with an extra display plugged in, libnotify bubbles show offscreen
      - (probably actually a libnotify bug; dunst works fine)
  - dwm
  - dmenu
  - mpd
  - openssh
    - no ~/.ssh/config.d dir: https://bugzilla.mindrot.org/show_bug.cgi?id=1613
  - tmux
    - default binding of ctrl-b is stupid
  - gpg
    - refuses to forget cached passphrases on sighup
  - eshell
    - high-throughput output is slow
  - erc
    - silently discards input in closed query buffers
  - mu4e
    - leans heavily on offlineimap or mbsync, neither of which is any good
* Things that bug me about software I use (a relatively complete list)
** Debian Wheezy
   - broken permissions in nm-applet
     http://bugs.debian.org/643028
   - need to teach network-manager it's OK to use device that was used for installation
     - sed -i s/managed=false/managed=true/ /etc/NetworkManager/NetworkManager.conf
     - improvement over squeeze at least
     - (32) Not authorized to control networking.
   - adding an additional keyboard doesn't honor caps->ctrl mod
   - libnotify broken outside gnome
     - claimed to be fixed, but isn't
       - http://bugs.debian.org/636435
       - actual fix
         - file /usr/share/dbus-1/services/org.freedesktop.Notifications.service
         - Exec=/usr/lib/notification-daemon/notification-daemon
** Emacs
*** elisp
   - lisp-2 is awful
   - no FFI
   - no immutability or referential transparency
   - no useful associative data type, vectors are useless
   - no concurrency
   - find-file-at-point does really stupid things sometimes with tramp
** mbsync
   - no docs
   - refuses to create maildir; must manually mkdir
   - no secure password storage
   - no cert pinning
** wicd
   - "automatically connect to this network" does nothing
** keysnail
   - haven't figured out how to fully-dotfileize it yet
   - hinting isn't link-text based
     - can't look before you leap
** firefox
*** remarkably resistant to automation
    - profile directory can't be given a reasonable name
    - no way to script extension installation
*** moving ~/.mozilla out of the way and back again deletes cookies/history
*** no way to add sane changes via an init file without further extensions
** clojure
   - Namespaces are not actually values or first-class referrable
   - nil is everywhere and causes bugs that are difficult to find the source
   - records/protocols cause subtle issues with reloading
   - chunked sequences can lead to unpredictable laziness behaviour
   - different mutable java objects can compare as equal
   - fn objects don't have metadata (:arglists, etc) by default
   - AOT is transitive
   - disregard for basic usability re: stack traces, etc
   - Regexes are not callable like functions
   - the reader can return mutable objects out of the box (java.util.Date is an abomination)
   - list? is a useless/misleading predicate
   - contains? has a misleading name
** racket
   - no docstrings (!!!) docs seem very HTML-centric
     - racket-mode helps with this sorta
   - no way to consistently reflect on argument names
   - opaque structs are very annoying, absolutely inappropriate for HTTP reqs
   - multiple return values
     - I guess this might have made sense before pattern matching was invented?
   - the immutable? function is usually wrong
   - internal defines make side-effects easier to hide
   - failure-result in dict-ref, etc special-cases procedures
     - (dict-ref d k f) ; what will this return if k is not found?
       - depends on whether f is a procedure or not! =(
   - waaaaaay too many macros
   - keywords are not first-class
   - package manager pulls in the latest version of libraries, yuck
     - not bad for pedagogical purposes; terrible for production code
   - hash tables and vectors are quoted by default
     - fixed in rackjure
   - hash tables are not functions
     - rackjure!
   - boxes are very low-level (no swap that accepts a change function)
     - rackjure!
   - no general-purpose equality predicate, but a lot better than CL/elisp
     - rackjure!
   - geiser
     - autodoc lists every argument as _
     - really easy to wedge it by launching a blocking server
** erlang
*** core language
    - syntax actually not so bad (for a non-homoiconic language)
    - very little use of higher-order functions for an FP language
    - no partial application or function composition -> sad panda
    - not having ocaml/elixir's |> operator is unfortunate
    - having two distinct string types is annoying
      - especially when the "bad" type is more convenient
    - no question marks or exclaimation points allowed in atoms/function names
    - pattern matching is great, but having to match against a record and reconstruct an updated one is lame
      - would be better to return update(MyRecord, some-field, UpdaterFn)
        - where UpdaterFn takes the current value and returns and updated one
        - expressing change as a function of the original value
          - there's a lib for this? need to investigate
    - how is there no automated tool to handle record field additions in code_change?
*** tooling
    - no way to "enter" a module from the shell
      - I guess the root problem here is "it's not actually a repl"?
    - ctrl-d is sacred; thou shalt not mess with EOF
    - debian packaging: installing erlang-nox omits test packages
      - results in rubbish errors when you try to run tests
    - dialyzer: why do you have to specify what apps you depend upon when it's already laid out in *.app.src?
      - still haven't gotten dialyzer working yet
    - sometimes incorrect/misleading results from erlang:get_stacktrace
    - ct output is hopelessly verbose; difficult to spot failures
      - rebar ct has never shown any useful output, ever
**** emacs support
     - three different options, each broken in different ways
     - packaging is a mess
     - there's surely more but so far I'm only using the most basic functions
**** rebar
     - depending on something that's not a tag/sha is crazy
       - more of a cultural problem than a technical one
     - three different rebar.config files containing mostly-duplicate data
       - it's just data! store the base version in one place and merge in the diffs
         - weird compilation errors depending on the order you use the config files in
     - no way to specify a minimum OTP version
     - skip_deps defaulting to false for tests is annoying
     - ct task regularly emits no output at all
     - ct task doesn't bother recompiling source even if it's changed
** ocaml
   - strings are mutable
     - mutable!
   - precedence rules can be bizarre and often unguessable
     - "just keep spamming with parens till it compiles"
   - pulling in jane street core makes executable sizes balloon way up
    - fix is in progress?
   - no concurrency
   - opam still defaults to "give me the latest version of this lib"
   - serialization still requires spoon-feeding the types
** lua
   - no arity checks
   - statement/expression distinction
   - globals by default
   - multiple return values
   - nil is everywhere
   - tables print opaquely
   - the repl completely buggers up when you enter expressions
   - explicit return
*** my ideal compile-to-lua language:
    - fn keyword creates arity-checked function
      - within fn, if compiles to and/or
      - implicit return
      - give values to do/loops/assignments?
    - let ... in
    - pattern matching
    - any non-whitespace characters allowed in identifiers
      - dashes in the middle of identifiers should be allowed
        - otherwise you're optimizing for obfuscation (subtraction without spaces)
    - pretty-printer in the repl (lua-repl has this already)

#!/usr/bin/env ruby

# Rodentless skype UI.
# Based on skype-status Â© 14/11/2007 Adrian Bridgett <adrian@smop.co.uk>
# http://www.smop.co.uk/blog/index.php/2007/11/14/skype-d-bus-notification/

# Released under GPLv3

begin
  require 'dbus'
  system("which dmenu > /dev/null && which zenity > /dev/null") or raise "deps!"
rescue LoadError, Exception
  abort "Try this: sudo apt-get install libdbus-ruby suckless-tools zenity"
end

PROTOCOL = 5

def invoke(command)
  @skype ||= begin
               service = DBus::SessionBus.instance.service("com.Skype.API")
               skype = service.object("/com/Skype")
               skype.introspect
               skype["com.Skype.API"].Invoke("NAME #{$0}")
               skype["com.Skype.API"].Invoke("PROTOCOL #{PROTOCOL}")
               skype["com.Skype.API"]
             end
  @skype.Invoke(command)
end

def get(query) # get list
  invoke(query).first.split(/,? /)[1 .. -1]
end

def pick_user
  ARGV.empty? ? `echo \"#{get("SEARCH FRIENDS").join("\n")}\" | dmenu` : ARGV.join(' ')
end

def go(command)
  case command
  when nil
    go `echo \"status\ncall\nhangup\ninvite\" | dmenu`

  when /help/
    abort "Commands: status [MSG], call [USER], invite [USER], hangup"

  when "status"
    msg = ARGV.empty? ? `zenity --text-info --editable` : ARGV.join(' ')
    invoke("SET PROFILE RICH_MOOD_TEXT #{msg}")

  when "call"
    user = pick_user
    invoke("CALL #{user}") unless user.empty?

  when "hangup"
    get("SEARCH ACTIVECALLS").each {|c| invoke("SET CALL #{c} STATUS FINISHED")}

  when "invite"
    user = pick_user
    unless user.empty?
      original_call = get("SEARCH ACTIVECALLS").first
      invoke("SET CALL #{original_call} STATUS ONHOLD")
      invoke("CALL #{user}")
      invoke("SET CALL #{original_call} STATUS INPROGRESS")
      new_call = get("SEARCH ACTIVECALLS").last
      until invoke("GET CALL #{new_call} STATUS").first =~ /INPRORGESS$/
        sleep 0.1
      end
      invoke("SET CALL #{new_call} JOIN_CONFERENCE #{original_call}")
    end
  end
end

go ARGV.shift
